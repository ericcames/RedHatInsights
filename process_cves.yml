---
  - name: Get the list of CVEs related to the server
    hosts: localhost
    connection: local
    gather_facts: no
    
    tasks:

    - name: Get my list of CVEs
      register: my_cve_list
      ignore_errors: true
      ansible.builtin.uri:
        url: "https://console.redhat.com/api/vulnerability/v1/systems/{{ my_insights_inventory_id }}/cves"
        method: GET
        user: "{{ insights_username }}"
        password: "{{ insights_password }}"
        validate_certs: no
        force_basic_auth: yes
        status_code: 200
        return_content: yes 
        headers:
          Content-Type: "application/json"
    
    - name: Create a change task for each cve with a playbook
      register: task_numbers_are_here
      loop: "{{ my_cve_list['json']['data'] }}"
      when: item.attributes.remediation == 2
      servicenow.itsm.change_request_task:
        configuration_item: "{{ my_server }}"
        change_request_number: "{{ ticket_number }}"
        type: implementation
        state: open
        assigned_to: "hercules"
        assignment_group: "Ansible West Tigers"
        short_description: "vulnerabilities:{{ item.attributes.synopsis }} on Red Hat Insights Inventory ID: {{ my_insights_inventory_id }}"
        description: "{{ item.attributes.description }}"
        on_hold: true
        hold_reason: "Waiting for Ansible Automation Platform to run the remediation playbook."
        other:
          approval: approved
          user_input: "{{ item.attributes.synopsis }}"

    - name: Create a Change Task tickets list
      loop: "{{ task_numbers_are_here['results'] }}"
      when: item.changed != false
      ansible.builtin.set_fact:        
        chg_tkt_list: "{{chg_tkt_list|default([]) + [{ 'number' : item.record.number, 
                                                       'short_description' : item.record.short_description, 
                                                       'task_sys_id' : item.record.sys_id,
                                                       'change_request_sys_id' : item.record.change_request,
                                                       'cmdb_ci' : item.record.cmdb_ci,
                                                       'insights_id' : my_insights_inventory_id,
                                                       'cve_id' : item.record.user_input }] }}"

    - name: print out Change Task Tickets list
      ansible.builtin.debug:
        msg: "{{ chg_tkt_list }}"

    - name: Create problem for each cve without a playbook
      register: problem_numbers_are_here
      loop: "{{ my_cve_list['json']['data'] }}"
      when: item.attributes.remediation != 2
      servicenow.itsm.problem:
        state: new
        short_description: "Red Hat Insights vulnerabilities:{{ item.attributes.synopsis }} there is no available Ansible Playbook :-0"
        description: "{{ item.attributes.description }}"
        impact: medium
        urgency: low
        other:
          user_input: "{{ my_server }}"

    - name: Create a Problem tickets list
      loop: "{{ problem_numbers_are_here['results'] }}"
      when: item.changed != false
      ansible.builtin.set_fact:
        pbm_tkt_list: "{{pbm_tkt_list|default([]) + [{ 'number' : item.record.number, 
                                                       'short_description' : item.record.short_description, 
                                                       'sys_id' : item.record.sys_id, 
                                                       'cmdb_ci' : item.record.user_input }] }}"
        

    # - name: print out Problem tickets list
    #   loop: "{{ pbm_tkt_list }}"
    #   ansible.builtin.debug:
    #     msg: "{{ item.number }}"

    #  - name: print
    #   ansible.builtin.debug:
    #     msg: "{{pbm_tkt_list | type_debug}}"

    - name: Generate playbooks to remediate vulnerabilities
      register: my_playbooks
      loop: "{{ chg_tkt_list }}"
      ansible.builtin.uri:
        url: "https://cloud.redhat.com/api/remediations/v1/playbook"
        method: POST
        user: "{{ insights_username }}"
        password: "{{ insights_password }}"
        validate_certs: no
        force_basic_auth: yes
        status_code: 200
        return_content: yes 
        headers:
          Content-Type: "application/json"
          accept: "text/vnd.yaml"
          Connection: "keep-alive"
        body_format: json
        body: "{{ lookup('ansible.builtin.template','templates/playbook_generator_body.j2') }}"

    - name: print my_playbooks
      loop: "{{ my_playbooks['results'] }}"
      ansible.builtin.debug:
        msg: "{{ item.content | to_nice_yaml }}"

    - name: Clone the software repository
      delegate_to: 127.0.0.1
      register: clone_result
      run_once: true
      when: software_repository is defined
      ansible.builtin.git:
        repo: "{{ software_repository }}"
        dest: "{{ local_repo }}"
        accept_hostkey: yes
        force: yes

    - name: Write the playbooks to the local_repo
      loop: "{{ my_playbooks['results'] }}"
      ansible.builtin.copy:
        dest: "{{ local_repo }}/{{ item.x_rh_insights_request_id }}"
        content: "{{ item.content | to_nice_yaml }}"

  - block:
    - name: Add any new playbooks to the software_repository
      delegate_to: localhost
      changed_when: False
      run_once: true
      ansible.builtin.shell: "git add *"
        args:
          chdir: "{{ software_repository }}"
        

    - name: Get the status of the repository
      register: status_results
      changed_when: False
      ignore_errors: yes
      delegate_to: localhost
      run_once: true
      ansible.builtin.shell: "git status"
        args:
          chdir: "{{ software_repository }}"
      

    - name: Commit the changes
      when: status_results.stdout is search('Changes')
      delegate_to: localhost
      run_once: true
      environment:
        GIT_COMMITTER_NAME: "{{ git_name | default(omit) }}"
        GIT_COMMITTER_EMAIL: "{{ git_email | default(omit) }}"
        GIT_AUTHOR_NAME: "{{ git_name | default(omit) }}"
        GIT_AUTHOR_EMAIL: "{{ git_email | default(omit) }}"
      ansible.builtin.shell: "git commit -am 'Changed'"
        args:
          chdir: "{{ software_repository }}"
      
    - name: Push the changes
      delegate_to: localhost
      run_once: true
      when: software_repository is defined
      ansible.builtin.shell: "git push"
        args:
          chdir: "{{ software_repository }}"
    